@{
    ViewBag.Title = "Import Certificate Locally";
}
<section class="featured">
    <div class="content-wrapper">
        <hgroup class="title">
            <h1>@ViewBag.Title:</h1>
            <h2>
                Based on <a href="http://blogs.msdn.com/b/sqlazure/archive/2010/09/09/10059889.aspx"
                    target="_blank">this article by Wayne Walter Berry</a>. Content reproduced without
                permission. Sue me <a href="http://www.brokenlink.com" target="_blank">here</a>.
            </h2>
        </hgroup>
        <p>
            <strong>Important:</strong> The instructions referenced above recommend only importing the public key certificate (.cer file) into your local certificate store.
            This is fine for users who will only
            <mark>encrypt</mark>
            config sections. However in order to
            <mark>decrypt</mark>
            them, you will need to import the private key certificate (.pfx file) into your
            local certificate store. 
        </p>
    </div>
</section>
<h3>
    Decide whether you will only want to encrypt the config sections, or both encrypt and decrypt them.
</h3>
<p>
    Only distrbute the private key (.PFX) certificate file and its password to users who you want to be able to decrypt config sections.
    Distribute the public key (.CER) certificate (but not the password!) to users who you want to only be able to encrypt config sections.
</p>
<h3>
    Importing the Public Key (for encrypt-only access)
</h3>
<p>
    The first thing that the SQL Azure administrator has to do is take the public key gotten from the Windows Azure administrator and import it into their local certificate store on their local box. The <a href="http://msdn.microsoft.com/en-us/library/k6h9cz8h(VS.80).aspx" target="_blank">aspnet_regiis.exe</a> tool which performs the encoding on the web.config uses the local certificate store.
</p>
<ol class="round">
    <li class="one">
        <h5>
            Open the Microsoft Management Console.
        </h5>
        Click Start, type <code>mmc</code> in the Search programs and files box, and then press <kbd>ENTER</kbd>.

    </li>
    <li class="two">
        <h5>
            Open a certificates snap-in
        </h5>
        a.) On the File menu, click <strong>Add/Remove Snap-in</strong>.
        <br />
        b.) Under Available snap-ins, double-click <strong>Certificates</strong>.
        <br />
        c.) Select <strong>Computer account</strong>, and then click <strong>Next</strong>.
        <br />
        d.) Click <strong>Local computer</strong>, and then click <strong>Finish</strong>.
        <br />
        <br />
        <strong>Tip:</strong> To avoid these steps in the future, after you have completed them for the first time, 
        click <strong>File &gt; Save</strong>.
        <br />
        Name the file <code>CertificatesConsole.msc</code>, and save to the default location.
        <br />
        The next time you run <code>mmc</code>, you can just click <strong>File &gt; Open</strong> and re-open your certificates console snap-in.
    </li>
    <li class="three">
        <h5>
            In the Personal store, right click, under &quot;All Tasks&quot;, click Import.
        </h5>
        Browse to the <strong>.cer file</strong> and import the certificate.
        <br />
        <br />
        <strong>Note:</strong> If you skipped the <a href="@Url.Action("CreateCertificates", "CloudConfigCrypto")">create certificates step</a>, you can import the .CER file 
        located in the <code>sample_certificates</code> folder of this project.
    </li>
    <li class="four">
        <h5>
            Note the thumbprint of the certificate
        </h5>
        Once you have the certificate imported, right click on it and choose Open. This will bring up the Certificate dialog. 
        Choose the details tab, scroll to the bottom and copy the thumbprint property. We will need this later.
        <br />
        <br />
        <strong>Tip:</strong> By default, the certificate puts spaces after every even-numbered character.
        <br />
        You can quickly remove these by running the following using the Package Manager Console (or powershell):
        <br />
        <code>"63 0e 33 c5 ea d4 2a 55 64 e2 2d 92 0a 0c 5a c4 b1 0c f0 52" -replace " "</code>
        <br />
        Just put your space-delimited thumbprint in quotes, and the above <code>-replace " "</code> command will remove the spaces for you.
    </li>
</ol>
<h3>
    Importing the Private Key (for encrypt/decrypt access)
</h3>
<p>
    The steps required for importing the private key are almost exactly like the steps above for the public key.
    The only difference is that you have to import the PFX file instead of hte CER file, and you must enter the 
    password when doing so. <strong>Only step #3 is different.</strong>
</p>
<ol class="round">
    <li class="three">
        <h5>
            In the Personal store, right click, under &quot;All Tasks&quot;, click Import.
        </h5>
        Browse to the <strong>.pfx file</strong> and import the certificate. (You will need to change the file type drop-down in order to be able to see the PFX file.)
        <br />
        Enter the password that was used to create the certificate.
        <br />
        If you want to be able to export the PFX file at a later time, check the box to make it exportable.
        <br />
        <br />
        <strong>Note:</strong> If you skipped the <a href="@Url.Action("CreateCertificates", "CloudConfigCrypto")">create certificates step</a>, you can import the .PFX file 
        located in the <code>sample_certificates</code> folder of this project.
        <br />
        The password is <code>pw</code>
    </li>
</ol>
<p>
    <a href="@Url.Action("CreateCertificates", "CloudConfigCrypto")">Previous Step: Create Certificates</a>
</p>
